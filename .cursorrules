# ABSTRACTU OBSERVER

## Description
Abstraction to abstraction, Ab2 is.

## Technology Stack
- Next.js (App Router)
- TypeScript
- Custom CSS
- Vercel (deployment, serverless, cron)
- MongoDB (future implementation)
- Solidity (smart contracts)
- Hardhat (contract development)
- Abstract Blockchain (EVM-compatible)

## Architecture Principles
1. Lightweight and performant frontend
2. Component-based architecture
3. Server-side rendering where beneficial
4. Progressive enhancement
5. Mobile-first responsive design
6. Consistent pattern integration across sections
7. Modular contract design with facet architecture
8. Upgradeable contracts following EIP-2535

## Code Style Guidelines
1. Use TypeScript for type safety
2. Follow ESLint rules
3. Use functional components with hooks
4. Prefer named exports over default exports
5. Use descriptive variable and function names
6. Document complex functions and components
7. Use CSS classes over inline styles
8. Follow BEM-like naming for CSS classes
9. Follow Solidity style guide for smart contracts
10. Implement extensive validation in contract functions

## Component Structure
1. Group related components in directories
2. Include index.ts files for clean exports
3. Co-locate component tests with components
4. Use a consistent naming convention

## CSS Organization
1. Maintain all global styles in globals.css
2. Group related styles with clear section comments
3. Use CSS variables for consistent theming
4. Minimize inline styles in components
5. Organize styles from general to specific
6. Use logical class naming that reflects component hierarchy
7. Separate layout styles from visual styles

## Documentation Style
1. Use consistent background patterns across all documentation
2. Implement floating navigation with transparent backgrounds
3. Apply consistent styling for section headings
4. Use gradient underlines for visual hierarchy
5. Ensure documentation reflects the ABSTRACTU design language
6. Create mobile-responsive navigation for all documentation
7. Document all contract functions with NatSpec comments
8. Include detailed explanations of contract interactions

## Smart Contract Development
1. Implement Diamond Standard (EIP-2535) for all contracts
2. Organize functionality into logical facets
3. Write comprehensive tests for all contract functions
4. Use TypeScript for contract testing and deployment
5. Follow best practices for gas optimization
6. Minimize storage usage through efficient data structures
7. Document all functions with NatSpec comments
8. Implement strict access control mechanisms
9. Prepare upgrade paths for all contract functionality
10. Use events for tracking state changes and off-chain indexing

## Contract Testing
1. Unit test individual facet functions
2. Integration test facet interactions
3. Deploy to local hardhat network before testnet
4. Verify all functions on Abstract testnet
5. Use gas reporting for optimization
6. Test upgrade mechanisms thoroughly
7. Simulate adversarial conditions
8. Document test coverage metrics

## State Management
1. Use React Context for global state
2. Use React Query for server state
3. Keep component state local when possible
4. Minimize prop drilling
5. Use contract events for blockchain state updates
6. Implement optimistic UI updates for blockchain interactions

## Performance Considerations
1. Optimize images and assets
2. Implement code splitting
3. Use Next.js Image component
4. Minimize JavaScript bundle size
5. Implement proper caching strategies
6. Keep CSS selectors efficient
7. Optimize contract functions for gas efficiency
8. Batch blockchain operations when possible

## Accessibility
1. Follow WCAG 2.1 AA standards
2. Use semantic HTML
3. Ensure keyboard navigation
4. Provide appropriate ARIA attributes
5. Test with screen readers
6. Maintain sufficient color contrast
7. Ensure blockchain interactions are clear and understandable

## Development Workflow
1. Create feature branches
2. Write tests for new features
3. Review code before merging
4. Document API changes
5. Keep dependencies updated
6. Regularly refactor CSS for maintainability
7. Test contracts locally before deployment
8. Use deployment scripts for consistent contract deployment
9. Document contract addresses and versions

## Future Considerations
1. User authentication system
2. Content submission API
3. AI integration for content generation
4. Interactive story features
5. Community collaboration tools
6. Datanomics
7. Tokenomic incentive mechanisms
8. DAO governance for protocol decisions
9. Zero-knowledge proofs for privacy features

## Philosophical Principles
- Always consider ABSTRACTU as the meta-abstractor rather than just a platform
- Recognize the recursive nature of abstraction processes
- Maintain the balance between ideal abstractions and pragmatic implementations
- Support both sequential refinement (vertical) and parallel exploration (horizontal)
- Aim for convergence through diverse paths of exploration
- Apply ergodicity principles to knowledge creation approaches

## Technical Standards
- Follow Diamond Standard (EIP-2535) for contract development
- Use status constants instead of enums for future extensibility
- Include version tracking in all data structures
- Implement proper storage namespacing to prevent collisions
- Make parameters configurable rather than hardcoding values
- Use explicit initialization functions for facets
- Store drafts in MongoDB, approved content on Filecoin, and metadata on Abstract blockchain

## Code Style
- Use TypeScript for type safety
- Follow Solidity style guide for smart contracts
- Implement modular facet architecture
- Document with comprehensive NatSpec comments
- Maintain consistent naming conventions
- Test extensively before deployment
- Ensure backward compatibility in upgrades

## User Experience
- Maintain minimalist design focused on content
- Provide intuitive navigation through both sequential and spatial interfaces
- Support exploration of idea lineage and relationships
- Allow users to visualize convergence of similar ideas
- Make blockchain interactions as seamless as possible
- Enable clear tracking of contribution status and evaluation

## Contribution Flow
- Draft contributions stored off-chain in MongoDB
- Only approved contributions stored permanently on Filecoin
- All contribution metadata and statuses recorded on blockchain
- ACRONTU provides evaluation and verification
- Support linking between related contributions
- Track both vertical and horizontal exploration patterns
- Implement reputation systems for contributors
